{"meta":{"title":"KillerZE","subtitle":null,"description":null,"author":"KillerZE","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"final-topic-code","slug":"final-topic-code","date":"2019-05-23T23:21:47.000Z","updated":"2019-05-23T23:53:24.633Z","comments":true,"path":"2019/05/24/final-topic-code/","link":"","permalink":"http://yoursite.com/2019/05/24/final-topic-code/","excerpt":"","text":"##碱基配对## #include &lt;stdio.h&gt; /* run this program using the console pauser or add your own getch, system(&quot;pause&quot;) or input loop */ #define NULL 0 int main(int argc, char** argv) { FILE *fp,*fp1; int i; char c,d; if((fp=fopen(&quot;F://学习相关笔记//大三//大三下//云计算//理论课//jjd.txt&quot;,&quot;w&quot;))==NULL){//输入的碱基放在jjd.txt文件里 printf(&quot;file can not open&quot;); //exit(0); } if((fp1=fopen(&quot;F://学习相关笔记//大三//大三下//云计算//理论课//jjd1.txt&quot;,&quot;w&quot;))==NULL){//与输入相匹配的碱基放在jjd1.txt文件里 printf(&quot;file can not open&quot;); // exit(0); } while(c=getchar()){ fputc(c,fp); if(c==&apos;A&apos;){//判断符合哪种条件在进行配对，A与T配，C与G配 d=&apos;T&apos;; fputc(d,fp1); } else if(c==&apos;T&apos;){ d=&apos;A&apos;; fputc(d,fp1); } else if(c==&apos;C&apos;){ d=&apos;G&apos;; fputc(d,fp1); } else if(c==&apos;G&apos;){ d=&apos;C&apos;; fputc(d,fp1); } else if(c==&apos;0&apos;){ break; } } fclose(fp); fclose(fp1); fp=NULL; fp1=NULL; return 0; } ##双螺旋结构## #include &lt;stdio.h&gt; /* run this program using the console pauser or add your own getch, system(&quot;pause&quot;) or input loop */ void shu(char c){ if(c==&apos;A&apos;){ printf(&quot;T&quot;); } else if(c==&apos;T&apos;){ printf(&quot;A&quot;); } else if(c==&apos;C&apos;){ printf(&quot;G&quot;); } else if(c==&apos;G&apos;){ printf(&quot;C&quot;); } } int main(int argc, char** argv) { //打印空格，用空格控制间距,使的它成为螺旋状 int m=1; char c; while(c=getchar()) { if(m==1||m%8==0){ putchar(c); printf(&quot; &quot;); shu(c); printf(&quot;\\n&quot;); } else if(m%8==2){ printf(&quot; &quot;); putchar(c); printf(&quot; &quot;); shu(c); printf(&quot;\\n&quot;); } else if(m%8==3){ printf(&quot; &quot;); putchar(c); printf(&quot; &quot;); shu(c); printf(&quot;\\n&quot;); } else if(m%8==4){ printf(&quot; &quot;); putchar(c); shu(c); printf(&quot;\\n&quot;); } else if(m%8==5){ printf(&quot; &quot;); putchar(c); shu(c); printf(&quot;\\n&quot;); } else if(m%8==6){ printf(&quot; &quot;); putchar(c); printf(&quot; &quot;); shu(c); printf(&quot;\\n&quot;); } else if(m%8==7){ printf(&quot; &quot;); putchar(c); printf(&quot; &quot;); shu(c); printf(&quot;\\n&quot;); } m++; } return 0; }","categories":[],"tags":[]},{"title":"JS知识-变量的类型和计算","slug":"JS知识-变量的类型和计算","date":"2019-04-09T10:21:47.000Z","updated":"2019-04-11T11:07:50.000Z","comments":true,"path":"2019/04/09/JS知识-变量的类型和计算/","link":"","permalink":"http://yoursite.com/2019/04/09/JS知识-变量的类型和计算/","excerpt":"","text":"知识点：1. 变量类型 值类型vs引用类型 //值类型 var a = 100; var b = a; a = 200; console.log(b); //100 //引用类型（其中对象，数组，函数都是引用类型） var a = {age:20}; var b = a; b.age = 21 console.log(a.age); //21 typeof运算符详解(typeof 只能区分值类型的详细类型，区分不出引用类型，除函数外） typeof undefined //undefined typeof &apos;abc&apos; // String typeof 123 //number typeof true //boolean typeof {} //object typeof [] //object typeof null //object typeof console.log //function 2. 变量计算 强制类型转换 //字符串拼接 var a = 100+10; //110 var b = 100+&apos;10&apos;; //&apos;10010&apos; //==运算符 100 == &apos;100&apos; //true 0 == &apos;&apos; //true null == undefined //true //if语句 var a = true; if(a){ //.... } var b = 100; if(b){ //.... } var c = &apos;&apos;; if(c){ //.... } //逻辑运算符 console.log(10 &amp;&amp; 0); //0 console.log(&apos;&apos; || &apos;abc&apos;); //abc console.log(!window.abc); //true //判断一个变量是否会被当做true还是false var a =100; console.log(!!a); 题目： JS实验typeof能得到的哪些类型？ typeof undefined //undefined typeof &apos;abc&apos; // String typeof 123 //number typeof true //boolean typeof {} //object typeof [] //object typeof null //object typeof console.log //function 何时使用 === 何时使用 == if(obj.a == null){ //这里相当于 obj.a === null || obj.a === undefined ，简写形式 //这是jQuery源码中的推荐写法 } JS中有哪些内置函数 —— 数据封装类型 object Array String Number Boolean Date Function Error RegExp JS按存储方式分为哪些类型，并描述其特点 //值类型 var a = 100; var b = a; a = 200; console.log(b); //100 //引用类型（其中对象，数组，函数都是引用类型） var a = {age:20}; var b = a; b.age = 21 console.log(a.age); //21 如何理解JSON JS只不过是一个JS对象而已 JSON.stringify({a:10,b:20}); JSON.parse(&apos;{&quot;a&quot;:&quot;10&quot;,&quot;b&quot;:&quot;20&quot;}&apos;);","categories":[],"tags":[]},{"title":"云计算","slug":"云计算第一次作业","date":"2019-03-17T03:31:42.622Z","updated":"2019-04-11T11:16:44.395Z","comments":true,"path":"2019/03/17/云计算第一次作业/","link":"","permalink":"http://yoursite.com/2019/03/17/云计算第一次作业/","excerpt":"","text":"Q1: Characterize the following three cloud computing models.（a）What is an IaaS cloud? Give one example system. 提供给消费者的服务是对所有计算基础设施的利用，包括处理CPU、内存、存储、网络和其它基本的计算资源，用户能够部署和运行任意软件，包括操作系统和应用程序。消费者不管理或控制任何云计算基础设施，但能控制操作系统的选择、存储空间、部署的应用，也有可能获得有限制的网络组件(例如路由器、，防火墙，、负载均衡器等)的控制。 举例：几年前如果你想在办公室或者公司的网站上运行一些企业应用，你需要去买服务器，或者别的高昂的硬件来控制本地应用，才能让你的业务正常运行。但现在可以租用IaaS公司提供的场外服务器，存储和网络硬件。这样一来，便大大的节省了维护成本和办公场地。 （b）What is a PaaS cloud? Give one example system. 提供给消费者的服务是把客户采用提供的开发语言和工具(例如Java，python, .Net等)开发的或收购的应用程序部署到供应商的云计算基础设施上去。客户不需要管理或控制底层的云基础设施，包括网络、服务器、操作系统、存储等，但客户能控制部署的应用程序，也可能控制运行应用程序的托管环境配置;举例： PaaS公司在网上提供各种开发和分发应用的解决方案，比如虚拟服务器和操作系统。这节省了你在硬件上的费用，也让分散的工作室之间的合作变得更加容易。网页应用管理，应用设计，应用虚拟主机，存储，安全以及应用开发协作工具等。 （c）What is a SaaS cloud? Give one example system. 提供给客户的服务是运营商运行在云计算基础设施上的应用程序，用户可以在各种设备上通过客户端界面访问，如浏览器。消费者不需要管理或控制任何云计算基础设施，包括网络、服务器、操作系统、存储等等; 举例：生活中，几乎我们每一天都在接触SaaS云服务，比如：我们平时使用的苹果手机云服务，网页中的一些云服务等。 Q2: 这两年的rmt=（17520）/（17520+24+rmt）=98%解得rmt=333.55（h） 每月rmt=333.55/24=13.9（h） A=P的K次方乘以（1-P）的3-k次方 当k等于3时","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-17T02:42:04.149Z","updated":"2019-03-17T02:42:04.149Z","comments":true,"path":"2019/03/17/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}